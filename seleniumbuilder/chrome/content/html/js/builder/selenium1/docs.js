/** Loads and parses the Selenium 1 documentation. */
builder.selenium1.docs = {};
builder.selenium1.typeDocs = {};
builder.selenium1.typeDocs['assertAllLinks'] = "Returns the IDs of all links on the page.\n\nIf a given link has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['verifyAllLinks'] = "Returns the IDs of all links on the page.\n\nIf a given link has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['assertAttribute'] = "Gets the value of an element attribute. The value of the attribute may\ndiffer across browsers (this is the case for the \"style\" attribute, for\nexample).";
builder.selenium1.typeDocs['verifyAttribute'] = "Gets the value of an element attribute. The value of the attribute may\ndiffer across browsers (this is the case for the \"style\" attribute, for\nexample).";
builder.selenium1.typeDocs['assertBodyText'] = "Gets the entire text of the page.";
builder.selenium1.typeDocs['verifyBodyText'] = "Gets the entire text of the page.";
builder.selenium1.typeDocs['assertElementPresent'] = "Verifies that the specified element is somewhere on the page.";
builder.selenium1.typeDocs['verifyElementPresent'] = "Verifies that the specified element is somewhere on the page.";
builder.selenium1.typeDocs['assertHtmlSource'] = "Returns the entire HTML source between the opening and\nclosing \"html\" tags.";
builder.selenium1.typeDocs['verifyHtmlSource'] = "Returns the entire HTML source between the opening and\nclosing \"html\" tags.";
builder.selenium1.typeDocs['assertOrdered'] = "Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will\nnot be considered ordered.";
builder.selenium1.typeDocs['verifyOrdered'] = "Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will\nnot be considered ordered.";
builder.selenium1.typeDocs['assertTable'] = "Gets the text from a cell of a table. The cellAddress syntax\ntableLocator.row.column, where row and column start at 0.";
builder.selenium1.typeDocs['verifyTable'] = "Gets the text from a cell of a table. The cellAddress syntax\ntableLocator.row.column, where row and column start at 0.";
builder.selenium1.typeDocs['assertText'] = "Gets the text of an element. This works for any element that contains\ntext. This command uses either the textContent (Mozilla-like browsers) or\nthe innerText (IE-like browsers) of the element, which is the rendered\ntext shown to the user.";
builder.selenium1.typeDocs['verifyText'] = "Gets the text of an element. This works for any element that contains\ntext. This command uses either the textContent (Mozilla-like browsers) or\nthe innerText (IE-like browsers) of the element, which is the rendered\ntext shown to the user.";
builder.selenium1.typeDocs['assertTextPresent'] = "Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.";
builder.selenium1.typeDocs['verifyTextPresent'] = "Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.";
builder.selenium1.typeDocs['assertVisible'] = "Determines if the specified element is visible. An\nelement can be rendered invisible by setting the CSS \"visibility\"\nproperty to \"hidden\", or the \"display\" property to \"none\", either for the\nelement itself or one if its ancestors.  This method will fail if\nthe element is not present.";
builder.selenium1.typeDocs['verifyVisible'] = "Determines if the specified element is visible. An\nelement can be rendered invisible by setting the CSS \"visibility\"\nproperty to \"hidden\", or the \"display\" property to \"none\", either for the\nelement itself or one if its ancestors.  This method will fail if\nthe element is not present.";
builder.selenium1.typeDocs['assertElementHeight'] = "Retrieves the height of an element";
builder.selenium1.typeDocs['verifyElementHeight'] = "Retrieves the height of an element";
builder.selenium1.typeDocs['assertElementIndex'] = "Get the relative index of an element to its parent (starting from 0). The comment node and empty text node\nwill be ignored.";
builder.selenium1.typeDocs['verifyElementIndex'] = "Get the relative index of an element to its parent (starting from 0). The comment node and empty text node\nwill be ignored.";
builder.selenium1.typeDocs['assertElementPositionLeft'] = "Retrieves the horizontal position of an element";
builder.selenium1.typeDocs['verifyElementPositionLeft'] = "Retrieves the horizontal position of an element";
builder.selenium1.typeDocs['assertElementPositionTop'] = "Retrieves the vertical position of an element";
builder.selenium1.typeDocs['verifyElementPositionTop'] = "Retrieves the vertical position of an element";
builder.selenium1.typeDocs['assertElementWidth'] = "Retrieves the width of an element";
builder.selenium1.typeDocs['verifyElementWidth'] = "Retrieves the width of an element";
builder.selenium1.typeDocs['assertAlertPresent'] = "Has an alert occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['verifyAlertPresent'] = "Has an alert occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['assertConfirmationPresent'] = "Has confirm() been called?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['verifyConfirmationPresent'] = "Has confirm() been called?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['assertPromptPresent'] = "Has a prompt occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['verifyPromptPresent'] = "Has a prompt occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['assertPrompt'] = "Retrieves the message of a JavaScript question prompt dialog generated during\nthe previous action.\n\nSuccessful handling of the prompt requires prior execution of the\nanswerOnNextPrompt command. If a prompt is generated but you\ndo not get/verify it, the next Selenium action will fail.\n\nNOTE: under Selenium, JavaScript prompts will NOT pop up a visible\ndialog.\n\nNOTE: Selenium does NOT support JavaScript prompts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['verifyPrompt'] = "Retrieves the message of a JavaScript question prompt dialog generated during\nthe previous action.\n\nSuccessful handling of the prompt requires prior execution of the\nanswerOnNextPrompt command. If a prompt is generated but you\ndo not get/verify it, the next Selenium action will fail.\n\nNOTE: under Selenium, JavaScript prompts will NOT pop up a visible\ndialog.\n\nNOTE: Selenium does NOT support JavaScript prompts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['assertConfirmation'] = "Retrieves the message of a JavaScript confirmation dialog generated during\nthe previous action.\n\n\nBy default, the confirm function will return true, having the same effect\nas manually clicking OK. This can be changed by prior execution of the\nchooseCancelOnNextConfirmation command. \n\n\nIf an confirmation is generated but you do not consume it with getConfirmation,\nthe next Selenium action will fail.\n\n\n\nNOTE: under Selenium, JavaScript confirmations will NOT pop up a visible\ndialog.\n\n\n\nNOTE: Selenium does NOT support JavaScript confirmations that are\ngenerated in a page's onload() event handler. In this case a visible\ndialog WILL be generated and Selenium will hang until you manually click\nOK.\n";
builder.selenium1.typeDocs['verifyConfirmation'] = "Retrieves the message of a JavaScript confirmation dialog generated during\nthe previous action.\n\n\nBy default, the confirm function will return true, having the same effect\nas manually clicking OK. This can be changed by prior execution of the\nchooseCancelOnNextConfirmation command. \n\n\nIf an confirmation is generated but you do not consume it with getConfirmation,\nthe next Selenium action will fail.\n\n\n\nNOTE: under Selenium, JavaScript confirmations will NOT pop up a visible\ndialog.\n\n\n\nNOTE: Selenium does NOT support JavaScript confirmations that are\ngenerated in a page's onload() event handler. In this case a visible\ndialog WILL be generated and Selenium will hang until you manually click\nOK.\n";
builder.selenium1.typeDocs['assertAlert'] = "Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.\n\nGetting an alert has the same effect as manually clicking OK. If an\nalert is generated but you do not consume it with getAlert, the next Selenium action\nwill fail.\n\nUnder Selenium, JavaScript alerts will NOT pop up a visible alert\ndialog.\n\nSelenium does NOT support JavaScript alerts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['verifyAlert'] = "Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.\n\nGetting an alert has the same effect as manually clicking OK. If an\nalert is generated but you do not consume it with getAlert, the next Selenium action\nwill fail.\n\nUnder Selenium, JavaScript alerts will NOT pop up a visible alert\ndialog.\n\nSelenium does NOT support JavaScript alerts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['assertAllWindowIds'] = "Returns the IDs of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['verifyAllWindowIds'] = "Returns the IDs of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['assertAllWindowNames'] = "Returns the names of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['verifyAllWindowNames'] = "Returns the names of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['assertAllWindowTitles'] = "Returns the titles of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['verifyAllWindowTitles'] = "Returns the titles of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['assertAttributeFromAllWindows'] = "Returns an array of JavaScript property values from all known windows having one.";
builder.selenium1.typeDocs['verifyAttributeFromAllWindows'] = "Returns an array of JavaScript property values from all known windows having one.";
builder.selenium1.typeDocs['assertLocation'] = "Gets the absolute URL of the current page.";
builder.selenium1.typeDocs['verifyLocation'] = "Gets the absolute URL of the current page.";
builder.selenium1.typeDocs['assertTitle'] = "Gets the title of the current page.";
builder.selenium1.typeDocs['verifyTitle'] = "Gets the title of the current page.";
builder.selenium1.typeDocs['assertAllButtons'] = "Returns the IDs of all buttons on the page.\n\nIf a given button has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['verifyAllButtons'] = "Returns the IDs of all buttons on the page.\n\nIf a given button has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['assertAllFields'] = "Returns the IDs of all input fields on the page.\n\nIf a given field has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['verifyAllFields'] = "Returns the IDs of all input fields on the page.\n\nIf a given field has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['assertChecked'] = "Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.";
builder.selenium1.typeDocs['verifyChecked'] = "Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.";
builder.selenium1.typeDocs['assertCursorPosition'] = "Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.\n\nSpecifically, if the cursor/selection has been cleared by JavaScript, this command will tend to\nreturn the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as SEL-243.\nThis method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.";
builder.selenium1.typeDocs['verifyCursorPosition'] = "Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.\n\nSpecifically, if the cursor/selection has been cleared by JavaScript, this command will tend to\nreturn the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as SEL-243.\nThis method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.";
builder.selenium1.typeDocs['assertEditable'] = "Determines whether the specified input element is editable, ie hasn't been disabled.\nThis method will fail if the specified element isn't an input element.";
builder.selenium1.typeDocs['verifyEditable'] = "Determines whether the specified input element is editable, ie hasn't been disabled.\nThis method will fail if the specified element isn't an input element.";
builder.selenium1.typeDocs['assertSelectOptions'] = "Gets all option labels in the specified select drop-down.";
builder.selenium1.typeDocs['verifySelectOptions'] = "Gets all option labels in the specified select drop-down.";
builder.selenium1.typeDocs['assertSelectedIds'] = "Gets all option element IDs for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['verifySelectedIds'] = "Gets all option element IDs for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['assertSelectedIndexes'] = "Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['verifySelectedIndexes'] = "Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['assertSelectedLabels'] = "Gets all option labels (visible text) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['verifySelectedLabels'] = "Gets all option labels (visible text) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['assertSelectedValues'] = "Gets all option values (value attributes) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['verifySelectedValues'] = "Gets all option values (value attributes) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['assertSomethingSelected'] = "Determines whether some option in a drop-down menu is selected.";
builder.selenium1.typeDocs['verifySomethingSelected'] = "Determines whether some option in a drop-down menu is selected.";
builder.selenium1.typeDocs['assertValue'] = "Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).\nFor checkbox/radio elements, the value will be \"on\" or \"off\" depending on\nwhether the element is checked or not.";
builder.selenium1.typeDocs['verifyValue'] = "Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).\nFor checkbox/radio elements, the value will be \"on\" or \"off\" depending on\nwhether the element is checked or not.";
builder.selenium1.typeDocs['assertExpression'] = "Returns the specified expression.\n\nThis is useful because of JavaScript preprocessing.\nIt is used to generate commands like assertExpression and waitForExpression.";
builder.selenium1.typeDocs['verifyExpression'] = "Returns the specified expression.\n\nThis is useful because of JavaScript preprocessing.\nIt is used to generate commands like assertExpression and waitForExpression.";
builder.selenium1.typeDocs['assertEval'] = "Gets the result of evaluating the specified JavaScript snippet.  The snippet may\nhave multiple lines, but only the result of the last line will be returned.\n\nNote that, by default, the snippet will run in the context of the \"selenium\"\nobject itself, so this will refer to the Selenium object.  Use window to\nrefer to the window of your application, e.g. window.document.getElementById('foo')\n\nIf you need to use\na locator to refer to a single element in your application page, you can\nuse this.browserbot.findElement(\"id=foo\") where \"id=foo\" is your locator.";
builder.selenium1.typeDocs['verifyEval'] = "Gets the result of evaluating the specified JavaScript snippet.  The snippet may\nhave multiple lines, but only the result of the last line will be returned.\n\nNote that, by default, the snippet will run in the context of the \"selenium\"\nobject itself, so this will refer to the Selenium object.  Use window to\nrefer to the window of your application, e.g. window.document.getElementById('foo')\n\nIf you need to use\na locator to refer to a single element in your application page, you can\nuse this.browserbot.findElement(\"id=foo\") where \"id=foo\" is your locator.";
builder.selenium1.typeDocs['assertMouseSpeed'] = "Returns the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10).";
builder.selenium1.typeDocs['verifyMouseSpeed'] = "Returns the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10).";
builder.selenium1.typeDocs['assertSpeed'] = "Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,\nthe delay is 0 milliseconds.\n\nSee also setSpeed.";
builder.selenium1.typeDocs['verifySpeed'] = "Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,\nthe delay is 0 milliseconds.\n\nSee also setSpeed.";
builder.selenium1.typeDocs['assertXpathCount'] = "Returns the number of nodes that match the specified xpath, eg. \"//table\" would give\nthe number of tables.";
builder.selenium1.typeDocs['verifyXpathCount'] = "Returns the number of nodes that match the specified xpath, eg. \"//table\" would give\nthe number of tables.";
builder.selenium1.typeDocs['assertCookie'] = "Return all cookies of the current page under test.";
builder.selenium1.typeDocs['verifyCookie'] = "Return all cookies of the current page under test.";
builder.selenium1.typeDocs['assertCookieByName'] = "Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.";
builder.selenium1.typeDocs['verifyCookieByName'] = "Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.";
builder.selenium1.typeDocs['assertCookiePresent'] = "Returns true if a cookie with the specified name is present, or false otherwise.";
builder.selenium1.typeDocs['verifyCookiePresent'] = "Returns true if a cookie with the specified name is present, or false otherwise.";
builder.selenium1.typeDocs['waitForAllLinks'] = "Returns the IDs of all links on the page.\n\nIf a given link has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['waitForAttribute'] = "Gets the value of an element attribute. The value of the attribute may\ndiffer across browsers (this is the case for the \"style\" attribute, for\nexample).";
builder.selenium1.typeDocs['waitForBodyText'] = "Gets the entire text of the page.";
builder.selenium1.typeDocs['waitForElementPresent'] = "Verifies that the specified element is somewhere on the page.";
builder.selenium1.typeDocs['waitForHtmlSource'] = "Returns the entire HTML source between the opening and\nclosing \"html\" tags.";
builder.selenium1.typeDocs['waitForOrdered'] = "Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will\nnot be considered ordered.";
builder.selenium1.typeDocs['waitForTable'] = "Gets the text from a cell of a table. The cellAddress syntax\ntableLocator.row.column, where row and column start at 0.";
builder.selenium1.typeDocs['waitForText'] = "Gets the text of an element. This works for any element that contains\ntext. This command uses either the textContent (Mozilla-like browsers) or\nthe innerText (IE-like browsers) of the element, which is the rendered\ntext shown to the user.";
builder.selenium1.typeDocs['waitForTextPresent'] = "Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.";
builder.selenium1.typeDocs['waitForVisible'] = "Determines if the specified element is visible. An\nelement can be rendered invisible by setting the CSS \"visibility\"\nproperty to \"hidden\", or the \"display\" property to \"none\", either for the\nelement itself or one if its ancestors.  This method will fail if\nthe element is not present.";
builder.selenium1.typeDocs['waitForElementHeight'] = "Retrieves the height of an element";
builder.selenium1.typeDocs['waitForElementIndex'] = "Get the relative index of an element to its parent (starting from 0). The comment node and empty text node\nwill be ignored.";
builder.selenium1.typeDocs['waitForElementPositionLeft'] = "Retrieves the horizontal position of an element";
builder.selenium1.typeDocs['waitForElementPositionTop'] = "Retrieves the vertical position of an element";
builder.selenium1.typeDocs['waitForElementWidth'] = "Retrieves the width of an element";
builder.selenium1.typeDocs['waitForAlertPresent'] = "Has an alert occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['waitForConfirmationPresent'] = "Has confirm() been called?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['waitForPromptPresent'] = "Has a prompt occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['waitForPrompt'] = "Retrieves the message of a JavaScript question prompt dialog generated during\nthe previous action.\n\nSuccessful handling of the prompt requires prior execution of the\nanswerOnNextPrompt command. If a prompt is generated but you\ndo not get/verify it, the next Selenium action will fail.\n\nNOTE: under Selenium, JavaScript prompts will NOT pop up a visible\ndialog.\n\nNOTE: Selenium does NOT support JavaScript prompts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['waitForConfirmation'] = "Retrieves the message of a JavaScript confirmation dialog generated during\nthe previous action.\n\n\nBy default, the confirm function will return true, having the same effect\nas manually clicking OK. This can be changed by prior execution of the\nchooseCancelOnNextConfirmation command. \n\n\nIf an confirmation is generated but you do not consume it with getConfirmation,\nthe next Selenium action will fail.\n\n\n\nNOTE: under Selenium, JavaScript confirmations will NOT pop up a visible\ndialog.\n\n\n\nNOTE: Selenium does NOT support JavaScript confirmations that are\ngenerated in a page's onload() event handler. In this case a visible\ndialog WILL be generated and Selenium will hang until you manually click\nOK.\n";
builder.selenium1.typeDocs['waitForAlert'] = "Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.\n\nGetting an alert has the same effect as manually clicking OK. If an\nalert is generated but you do not consume it with getAlert, the next Selenium action\nwill fail.\n\nUnder Selenium, JavaScript alerts will NOT pop up a visible alert\ndialog.\n\nSelenium does NOT support JavaScript alerts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['waitForAllWindowIds'] = "Returns the IDs of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['waitForAllWindowNames'] = "Returns the names of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['waitForAllWindowTitles'] = "Returns the titles of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['waitForAttributeFromAllWindows'] = "Returns an array of JavaScript property values from all known windows having one.";
builder.selenium1.typeDocs['waitForLocation'] = "Gets the absolute URL of the current page.";
builder.selenium1.typeDocs['waitForTitle'] = "Gets the title of the current page.";
builder.selenium1.typeDocs['waitForAllButtons'] = "Returns the IDs of all buttons on the page.\n\nIf a given button has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['waitForAllFields'] = "Returns the IDs of all input fields on the page.\n\nIf a given field has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['waitForChecked'] = "Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.";
builder.selenium1.typeDocs['waitForCursorPosition'] = "Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.\n\nSpecifically, if the cursor/selection has been cleared by JavaScript, this command will tend to\nreturn the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as SEL-243.\nThis method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.";
builder.selenium1.typeDocs['waitForEditable'] = "Determines whether the specified input element is editable, ie hasn't been disabled.\nThis method will fail if the specified element isn't an input element.";
builder.selenium1.typeDocs['waitForSelectOptions'] = "Gets all option labels in the specified select drop-down.";
builder.selenium1.typeDocs['waitForSelectedIds'] = "Gets all option element IDs for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['waitForSelectedIndexes'] = "Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['waitForSelectedLabels'] = "Gets all option labels (visible text) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['waitForSelectedValues'] = "Gets all option values (value attributes) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['waitForSomethingSelected'] = "Determines whether some option in a drop-down menu is selected.";
builder.selenium1.typeDocs['waitForValue'] = "Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).\nFor checkbox/radio elements, the value will be \"on\" or \"off\" depending on\nwhether the element is checked or not.";
builder.selenium1.typeDocs['waitForExpression'] = "Returns the specified expression.\n\nThis is useful because of JavaScript preprocessing.\nIt is used to generate commands like assertExpression and waitForExpression.";
builder.selenium1.typeDocs['waitForEval'] = "Gets the result of evaluating the specified JavaScript snippet.  The snippet may\nhave multiple lines, but only the result of the last line will be returned.\n\nNote that, by default, the snippet will run in the context of the \"selenium\"\nobject itself, so this will refer to the Selenium object.  Use window to\nrefer to the window of your application, e.g. window.document.getElementById('foo')\n\nIf you need to use\na locator to refer to a single element in your application page, you can\nuse this.browserbot.findElement(\"id=foo\") where \"id=foo\" is your locator.";
builder.selenium1.typeDocs['waitForMouseSpeed'] = "Returns the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10).";
builder.selenium1.typeDocs['waitForSpeed'] = "Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,\nthe delay is 0 milliseconds.\n\nSee also setSpeed.";
builder.selenium1.typeDocs['waitForXpathCount'] = "Returns the number of nodes that match the specified xpath, eg. \"//table\" would give\nthe number of tables.";
builder.selenium1.typeDocs['waitForCookie'] = "Return all cookies of the current page under test.";
builder.selenium1.typeDocs['waitForCookieByName'] = "Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.";
builder.selenium1.typeDocs['waitForCookiePresent'] = "Returns true if a cookie with the specified name is present, or false otherwise.";
builder.selenium1.typeDocs['storeAllLinks'] = "Returns the IDs of all links on the page.\n\nIf a given link has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['storeAttribute'] = "Gets the value of an element attribute. The value of the attribute may\ndiffer across browsers (this is the case for the \"style\" attribute, for\nexample).";
builder.selenium1.typeDocs['storeBodyText'] = "Gets the entire text of the page.";
builder.selenium1.typeDocs['storeElementPresent'] = "Verifies that the specified element is somewhere on the page.";
builder.selenium1.typeDocs['storeHtmlSource'] = "Returns the entire HTML source between the opening and\nclosing \"html\" tags.";
builder.selenium1.typeDocs['storeOrdered'] = "Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will\nnot be considered ordered.";
builder.selenium1.typeDocs['storeTable'] = "Gets the text from a cell of a table. The cellAddress syntax\ntableLocator.row.column, where row and column start at 0.";
builder.selenium1.typeDocs['storeText'] = "Gets the text of an element. This works for any element that contains\ntext. This command uses either the textContent (Mozilla-like browsers) or\nthe innerText (IE-like browsers) of the element, which is the rendered\ntext shown to the user.";
builder.selenium1.typeDocs['storeTextPresent'] = "Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.";
builder.selenium1.typeDocs['storeVisible'] = "Determines if the specified element is visible. An\nelement can be rendered invisible by setting the CSS \"visibility\"\nproperty to \"hidden\", or the \"display\" property to \"none\", either for the\nelement itself or one if its ancestors.  This method will fail if\nthe element is not present.";
builder.selenium1.typeDocs['storeElementHeight'] = "Retrieves the height of an element";
builder.selenium1.typeDocs['storeElementIndex'] = "Get the relative index of an element to its parent (starting from 0). The comment node and empty text node\nwill be ignored.";
builder.selenium1.typeDocs['storeElementPositionLeft'] = "Retrieves the horizontal position of an element";
builder.selenium1.typeDocs['storeElementPositionTop'] = "Retrieves the vertical position of an element";
builder.selenium1.typeDocs['storeElementWidth'] = "Retrieves the width of an element";
builder.selenium1.typeDocs['storeAlertPresent'] = "Has an alert occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['storeConfirmationPresent'] = "Has confirm() been called?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['storePromptPresent'] = "Has a prompt occurred?\n\n\nThis function never throws an exception\n";
builder.selenium1.typeDocs['storePrompt'] = "Retrieves the message of a JavaScript question prompt dialog generated during\nthe previous action.\n\nSuccessful handling of the prompt requires prior execution of the\nanswerOnNextPrompt command. If a prompt is generated but you\ndo not get/verify it, the next Selenium action will fail.\n\nNOTE: under Selenium, JavaScript prompts will NOT pop up a visible\ndialog.\n\nNOTE: Selenium does NOT support JavaScript prompts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['storeConfirmation'] = "Retrieves the message of a JavaScript confirmation dialog generated during\nthe previous action.\n\n\nBy default, the confirm function will return true, having the same effect\nas manually clicking OK. This can be changed by prior execution of the\nchooseCancelOnNextConfirmation command. \n\n\nIf an confirmation is generated but you do not consume it with getConfirmation,\nthe next Selenium action will fail.\n\n\n\nNOTE: under Selenium, JavaScript confirmations will NOT pop up a visible\ndialog.\n\n\n\nNOTE: Selenium does NOT support JavaScript confirmations that are\ngenerated in a page's onload() event handler. In this case a visible\ndialog WILL be generated and Selenium will hang until you manually click\nOK.\n";
builder.selenium1.typeDocs['storeAlert'] = "Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.\n\nGetting an alert has the same effect as manually clicking OK. If an\nalert is generated but you do not consume it with getAlert, the next Selenium action\nwill fail.\n\nUnder Selenium, JavaScript alerts will NOT pop up a visible alert\ndialog.\n\nSelenium does NOT support JavaScript alerts that are generated in a\npage's onload() event handler. In this case a visible dialog WILL be\ngenerated and Selenium will hang until someone manually clicks OK.";
builder.selenium1.typeDocs['storeAllWindowIds'] = "Returns the IDs of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['storeAllWindowNames'] = "Returns the names of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['storeAllWindowTitles'] = "Returns the titles of all windows that the browser knows about in an array.";
builder.selenium1.typeDocs['storeAttributeFromAllWindows'] = "Returns an array of JavaScript property values from all known windows having one.";
builder.selenium1.typeDocs['storeLocation'] = "Gets the absolute URL of the current page.";
builder.selenium1.typeDocs['storeTitle'] = "Gets the title of the current page.";
builder.selenium1.typeDocs['storeAllButtons'] = "Returns the IDs of all buttons on the page.\n\nIf a given button has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['storeAllFields'] = "Returns the IDs of all input fields on the page.\n\nIf a given field has no ID, it will appear as \"\" in this array.";
builder.selenium1.typeDocs['storeChecked'] = "Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.";
builder.selenium1.typeDocs['storeCursorPosition'] = "Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.\n\nSpecifically, if the cursor/selection has been cleared by JavaScript, this command will tend to\nreturn the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as SEL-243.\nThis method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.";
builder.selenium1.typeDocs['storeEditable'] = "Determines whether the specified input element is editable, ie hasn't been disabled.\nThis method will fail if the specified element isn't an input element.";
builder.selenium1.typeDocs['storeSelectOptions'] = "Gets all option labels in the specified select drop-down.";
builder.selenium1.typeDocs['storeSelectedIds'] = "Gets all option element IDs for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['storeSelectedIndexes'] = "Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['storeSelectedLabels'] = "Gets all option labels (visible text) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['storeSelectedValues'] = "Gets all option values (value attributes) for selected options in the specified select or multi-select element.";
builder.selenium1.typeDocs['storeSomethingSelected'] = "Determines whether some option in a drop-down menu is selected.";
builder.selenium1.typeDocs['storeValue'] = "Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).\nFor checkbox/radio elements, the value will be \"on\" or \"off\" depending on\nwhether the element is checked or not.";
builder.selenium1.typeDocs['storeExpression'] = "Returns the specified expression.\n\nThis is useful because of JavaScript preprocessing.\nIt is used to generate commands like assertExpression and waitForExpression.";
builder.selenium1.typeDocs['storeEval'] = "Gets the result of evaluating the specified JavaScript snippet.  The snippet may\nhave multiple lines, but only the result of the last line will be returned.\n\nNote that, by default, the snippet will run in the context of the \"selenium\"\nobject itself, so this will refer to the Selenium object.  Use window to\nrefer to the window of your application, e.g. window.document.getElementById('foo')\n\nIf you need to use\na locator to refer to a single element in your application page, you can\nuse this.browserbot.findElement(\"id=foo\") where \"id=foo\" is your locator.";
builder.selenium1.typeDocs['storeMouseSpeed'] = "Returns the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10).";
builder.selenium1.typeDocs['storeSpeed'] = "Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,\nthe delay is 0 milliseconds.\n\nSee also setSpeed.";
builder.selenium1.typeDocs['storeXpathCount'] = "Returns the number of nodes that match the specified xpath, eg. \"//table\" would give\nthe number of tables.";
builder.selenium1.typeDocs['storeCookie'] = "Return all cookies of the current page under test.";
builder.selenium1.typeDocs['storeCookieByName'] = "Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.";
builder.selenium1.typeDocs['storeCookiePresent'] = "Returns true if a cookie with the specified name is present, or false otherwise.";
builder.selenium1.typeDocs['click'] = "Clicks on a link, button, checkbox or radio button. If the click action\ncauses a new page to load (like a link usually does), call\nwaitForPageToLoad.";
builder.selenium1.typeDocs['clickAt'] = "Clicks on a link, button, checkbox or radio button. If the click action\ncauses a new page to load (like a link usually does), call\nwaitForPageToLoad.";
builder.selenium1.typeDocs['doubleClick'] = "Double clicks on a link, button, checkbox or radio button. If the double click action\ncauses a new page to load (like a link usually does), call\nwaitForPageToLoad.";
builder.selenium1.typeDocs['doubleClickAt'] = "Doubleclicks on a link, button, checkbox or radio button. If the action\ncauses a new page to load (like a link usually does), call\nwaitForPageToLoad.";
builder.selenium1.typeDocs['dragAndDrop'] = "Drags an element a certain distance and then drops it";
builder.selenium1.typeDocs['dragAndDropToObject'] = "Drags an element and drops it on another element";
builder.selenium1.typeDocs['mouseDown'] = "Simulates a user pressing the left mouse button (without releasing it yet) on\nthe specified element.";
builder.selenium1.typeDocs['mouseDownAt'] = "Simulates a user pressing the left mouse button (without releasing it yet) at\nthe specified location.";
builder.selenium1.typeDocs['mouseDownRight'] = "Simulates a user pressing the right mouse button (without releasing it yet) on\nthe specified element.";
builder.selenium1.typeDocs['mouseDownRightAt'] = "Simulates a user pressing the right mouse button (without releasing it yet) at\nthe specified location.";
builder.selenium1.typeDocs['mouseMove'] = "Simulates a user pressing the mouse button (without releasing it yet) on\nthe specified element.";
builder.selenium1.typeDocs['mouseMoveAt'] = "Simulates a user pressing the mouse button (without releasing it yet) on\nthe specified element.";
builder.selenium1.typeDocs['mouseOut'] = "Simulates a user moving the mouse pointer away from the specified element.";
builder.selenium1.typeDocs['mouseOver'] = "Simulates a user hovering a mouse over the specified element.";
builder.selenium1.typeDocs['mouseUp'] = "Simulates the event that occurs when the user releases the mouse button (i.e., stops\nholding the button down) on the specified element.";
builder.selenium1.typeDocs['mouseUpAt'] = "Simulates the event that occurs when the user releases the mouse button (i.e., stops\nholding the button down) at the specified location.";
builder.selenium1.typeDocs['mouseUpRight'] = "Simulates the event that occurs when the user releases the right mouse button (i.e., stops\nholding the button down) on the specified element.";
builder.selenium1.typeDocs['mouseUpRightAt'] = "Simulates the event that occurs when the user releases the right mouse button (i.e., stops\nholding the button down) at the specified location.";
builder.selenium1.typeDocs['keyDown'] = "Simulates a user pressing a key (without releasing it yet).";
builder.selenium1.typeDocs['keyDownNative'] = "Simulates a user pressing a key (without releasing it yet) by sending a native operating system keystroke.\nThis function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing\na key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and\nmetaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular\nelement, focus on the element first before running this command.";
builder.selenium1.typeDocs['keyPress'] = "Simulates a user pressing and releasing a key.";
builder.selenium1.typeDocs['keyPressNative'] = "Simulates a user pressing and releasing a key by sending a native operating system keystroke.\nThis function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing\na key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and\nmetaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular\nelement, focus on the element first before running this command.";
builder.selenium1.typeDocs['keyUp'] = "Simulates a user releasing a key.";
builder.selenium1.typeDocs['keyUpNative'] = "Simulates a user releasing a key by sending a native operating system keystroke.\nThis function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing\na key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and\nmetaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular\nelement, focus on the element first before running this command.";
builder.selenium1.typeDocs['type'] = "Sets the value of an input field, as though you typed it in.\n\nIn Go Test It mode, this acts by firing keyDown, keyPress and keyUp events\nat the input box before finally setting the value explicitly. In Selenium mode\nthis sets the value and fires no events\n\nCan also be used to set the value of combo boxes, check boxes, etc. In these cases,\nvalue should be the value of the option selected, not the visible text.";
builder.selenium1.typeDocs['typeKeys'] = "Simulates keystroke events on the specified element, as though you typed the value key-by-key.\n\nThis is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string;\nthis is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.\n\nUnlike the simple \"type\" command, which forces the specified value into the page directly, this command\nmay or may not have any visible effect, even in cases where typing keys would normally have a visible effect.\nFor example, if you use \"typeKeys\" on a form element, you may or may not see the results of what you typed in\nthe field.\nIn some cases, you may need to use the simple \"type\" command to set the value of the field and then the \"typeKeys\" command to\nsend the keystroke events corresponding to what you just typed.";
builder.selenium1.typeDocs['altKeyDown'] = "Press the alt key and hold it down until doAltUp() is called or a new page is loaded.";
builder.selenium1.typeDocs['altKeyUp'] = "Release the alt key.";
builder.selenium1.typeDocs['controlKeyDown'] = "Press the control key and hold it down until doControlUp() is called or a new page is loaded.";
builder.selenium1.typeDocs['controlKeyUp'] = "Release the control key.";
builder.selenium1.typeDocs['metaKeyDown'] = "Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.";
builder.selenium1.typeDocs['metaKeyUp'] = "Release the meta key.";
builder.selenium1.typeDocs['shiftKeyDown'] = "Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.";
builder.selenium1.typeDocs['shiftKeyUp'] = "Release the shift key.";
builder.selenium1.typeDocs['addSelection'] = "Add a selection to the set of selected options in a multi-select element using an option locator.\n\n@see #doSelect for details of option locators";
builder.selenium1.typeDocs['check'] = "Check a toggle-button (checkbox/radio)";
builder.selenium1.typeDocs['focus'] = "Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field.";
builder.selenium1.typeDocs['removeAllSelections'] = "Unselects all of the selected options in a multi-select element.";
builder.selenium1.typeDocs['removeSelection'] = "Remove a selection from the set of selected options in a multi-select element using an option locator.\n\n@see #doSelect for details of option locators";
builder.selenium1.typeDocs['select'] = "Select an option from a drop-down using an option locator.\n\n\nOption locators provide different ways of specifying options of an HTML\nSelect element (e.g. for selecting a specific option, or for asserting\nthat the selected option satisfies a specification). There are several\nforms of Select Option Locator.\n\n\nlabel=labelPattern:\nmatches options based on their labels, i.e. the visible text. (This\nis the default.)\n\nlabel=regexp:^[Oo]ther\n\n\nvalue=valuePattern:\nmatches options based on their values.\n\nvalue=other\n\n\n\n\nid=id:\n\nmatches options based on their ids.\n\nid=option1\n\n\nindex=index:\nmatches an option based on its index (offset from zero).\n\n\nindex=2\n\n\n\n\nIf no option locator prefix is provided, the default behaviour is to match on label.\n";
builder.selenium1.typeDocs['setCursorPosition'] = "Moves the text cursor to the specified position in the given input element or textarea.\nThis method will fail if the specified element isn't an input element or textarea.";
builder.selenium1.typeDocs['submit'] = "Submit the specified form. This is particularly useful for forms without\nsubmit buttons, e.g. single-input \"Search\" forms.";
builder.selenium1.typeDocs['uncheck'] = "Uncheck a toggle-button (checkbox/radio)";
builder.selenium1.typeDocs['close'] = "Simulates the user clicking the \"close\" button in the titlebar of a popup\nwindow or tab.";
builder.selenium1.typeDocs['goBack'] = "Simulates the user clicking the \"back\" button on their browser.";
builder.selenium1.typeDocs['open'] = "Opens an URL in the test frame. This accepts both relative and absolute\nURLs.\n\nThe \"open\" command waits for the page to load before proceeding,\nie. the \"AndWait\" suffix is implicit.\n\nNote: The URL must be on the same domain as the runner HTML\ndue to security restrictions in the browser (Same Origin Policy). If you\nneed to open an URL on another domain, use the Selenium Server to start a\nnew browser session on that domain.";
builder.selenium1.typeDocs['openWindow'] = "Opens a popup window (if a window with that ID isn't already open).\nAfter opening the window, you'll need to select it using the selectWindow\ncommand.\n\nThis command can also be a useful workaround for bug SEL-339.  In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example).\nIn those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using\nan empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").";
builder.selenium1.typeDocs['refresh'] = "Simulates the user clicking the \"Refresh\" button on their browser.";
builder.selenium1.typeDocs['selectFrame'] = "Selects a frame within the current window.  (You may invoke this command\nmultiple times to select nested frames.)  To select the parent frame, use\n\"relative=parent\" as a locator; to select the top frame, use \"relative=top\".\nYou can also select a frame by its 0-based index number; select the first frame with\n\"index=0\", or the third frame with \"index=2\".\n\nYou may also use a DOM expression to identify the frame you want directly,\nlike this: dom=frames[\"main\"].frames[\"subframe\"]";
builder.selenium1.typeDocs['selectWindow'] = "Selects a popup window using a window locator; once a popup window has been selected, all\ncommands go to that window. To select the main window again, use null\nas the target.\n\n\n\nWindow locators provide different ways of specifying the window object:\nby title, by internal JavaScript \"name,\" or by JavaScript variable.\n\n\ntitle=My Special Window:\nFinds the window using the text that appears in the title bar.  Be careful;\ntwo windows can share the same title.  If that happens, this locator will\njust pick one.\n\nname=myWindow:\nFinds the window using its internal JavaScript \"name\" property.  This is the second \nparameter \"windowName\" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag)\n(which Selenium intercepts).\n\nvar=variableName:\nSome pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current\napplication window, e.g. \"window.foo = window.open(url);\".  In those cases, you can open the window using\n\"var=foo\".\n\n\n\nIf no window locator prefix is provided, we'll try to guess what you mean like this:\n1.) if windowID is null, (or the string \"null\") then it is assumed the user is referring to the original window instantiated by the browser).\n2.) if the value of the \"windowID\" parameter is a JavaScript variable name in the current application window, then it is assumed\nthat this variable contains the return value from a call to the JavaScript window.open() method.\n3.) Otherwise, selenium looks in a hash it maintains that maps string names to window \"names\".\n4.) If that fails, we'll try looping over all of the known windows to try to find the appropriate \"title\".\nSince \"title\" is not necessarily unique, this may have unexpected behavior.\n\nIf you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages\nwhich identify the names of windows created via window.open (and therefore intercepted by Selenium).  You will see messages\nlike the following for each window as it is opened:\n\ndebug: window.open call intercepted; window ID (which you can use with selectWindow()) is \"myNewWindow\"\n\nIn some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example).\n(This is bug SEL-339.)  In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using\nan empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").";
builder.selenium1.typeDocs['windowFocus'] = "Gives focus to the currently selected window";
builder.selenium1.typeDocs['windowMaximize'] = "Resize currently selected window to take up the entire screen";
builder.selenium1.typeDocs['answerOnNextPrompt'] = "Instructs Selenium to return the specified answer string in response to\nthe next JavaScript prompt [window.prompt()].";
builder.selenium1.typeDocs['chooseCancelOnNextConfirmation'] = "\nBy default, Selenium's overridden window.confirm() function will\nreturn true, as if the user had manually clicked OK; after running\nthis command, the next call to confirm() will return false, as if\nthe user had clicked Cancel.  Selenium will then resume using the\ndefault behavior for future confirmations, automatically returning \ntrue (OK) unless/until you explicitly call this command for each\nconfirmation.\n\n\nTake note - every time a confirmation comes up, you must\nconsume it with a corresponding getConfirmation, or else\nthe next selenium operation will fail.\n";
builder.selenium1.typeDocs['chooseOkOnNextConfirmation'] = "\nUndo the effect of calling chooseCancelOnNextConfirmation.  Note\nthat Selenium's overridden window.confirm() function will normally automatically\nreturn true, as if the user had manually clicked OK, so you shouldn't\nneed to use this command unless for some reason you need to change\nyour mind prior to the next confirmation.  After any confirmation, Selenium will resume using the\ndefault behavior for future confirmations, automatically returning \ntrue (OK) unless/until you explicitly call chooseCancelOnNextConfirmation for each\nconfirmation.\n\n\nTake note - every time a confirmation comes up, you must\nconsume it with a corresponding getConfirmation, or else\nthe next selenium operation will fail.\n";
builder.selenium1.typeDocs['contextMenu'] = "Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element).";
builder.selenium1.typeDocs['contextMenuAt'] = "Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element).";
builder.selenium1.typeDocs['waitForCondition'] = "Runs the specified JavaScript snippet repeatedly until it evaluates to \"true\".\nThe snippet may have multiple lines, but only the result of the last line\nwill be considered.\n\nNote that, by default, the snippet will be run in the runner's test window, not in the window\nof your application.  To get the window of your application, you can use\nthe JavaScript snippet selenium.browserbot.getCurrentWindow(), and then\nrun your JavaScript in there";
builder.selenium1.typeDocs['waitForFrameToLoad'] = "Waits for a new frame to load.\n\nSelenium constantly keeps track of new pages and frames loading, \nand sets a \"newPageLoaded\" flag when it first notices a page load.\n\nSee waitForPageToLoad for more information.";
builder.selenium1.typeDocs['waitForPageToLoad'] = "Waits for a new page to load.\n\nYou can use this command instead of the \"AndWait\" suffixes, \"clickAndWait\", \"selectAndWait\", \"typeAndWait\" etc.\n(which are only available in the JS API).\n\nSelenium constantly keeps track of new pages loading, and sets a \"newPageLoaded\"\nflag when it first notices a page load.  Running any other Selenium command after\nturns the flag to false.  Hence, if you want to wait for a page to load, you must\nwait immediately after a Selenium command that caused a page-load.";
builder.selenium1.typeDocs['waitForPopUp'] = "Waits for a popup window to appear and load up.";
builder.selenium1.typeDocs['addLocationStrategy'] = "Defines a new function for Selenium to locate elements on the page.\nFor example,\nif you define the strategy \"foo\", and someone runs click(\"foo=blah\"), we'll\nrun your function, passing you the string \"blah\", and click on the element \nthat your function\nreturns, or throw an \"Element not found\" error if your function returns null.\n\nWe'll pass three arguments to your function:\n\nlocator: the string the user passed in\ninWindow: the currently selected window\ninDocument: the currently selected document\n\nThe function must return null if the element can't be found.";
builder.selenium1.typeDocs['allowNativeXpath'] = "Specifies whether Selenium should use the native in-browser implementation\nof XPath (if any native version is available); if you pass \"false\" to\nthis function, we will always use our pure-JavaScript xpath library.\nUsing the pure-JS xpath library can improve the consistency of xpath\nelement locators between different browser vendors, but the pure-JS\nversion is much slower than the native implementations.";
builder.selenium1.typeDocs['ignoreAttributesWithoutValue'] = "Specifies whether Selenium will ignore xpath attributes that have no\nvalue, i.e. are the empty string, when using the non-native xpath\nevaluation engine. You'd want to do this for performance reasons in IE.\nHowever, this could break certain xpaths, for example an xpath that looks\nfor an attribute whose value is NOT the empty string.\n\nThe hope is that such xpaths are relatively rare, but the user should\nhave the option of using them. Note that this only influences xpath\nevaluation when using the ajaxslt engine (i.e. not \"javascript-xpath\").";
builder.selenium1.typeDocs['setBrowserLogLevel'] = "Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded.\nValid logLevel strings are: \"debug\", \"info\", \"warn\", \"error\" or \"off\".\nTo see the browser logs, you need to\neither show the log window in GUI mode, or enable browser-side logging in Selenium RC.";
builder.selenium1.typeDocs['setContext'] = "Writes a message to the status bar and adds a note to the browser-side\nlog.";
builder.selenium1.typeDocs['setMouseSpeed'] = "Configure the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10).\nSetting this value to 0 means that we'll send a \"mousemove\" event to every single pixel\nin between the start location and the end location; that can be very slow, and may\ncause some browsers to force the JavaScript to timeout.\n\nIf the mouse speed is greater than the distance between the two dragged objects, we'll\njust send one \"mousemove\" at the start location and then one final one at the end location.";
builder.selenium1.typeDocs['setSpeed'] = "Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation).  By default, there is no such delay, i.e.,\nthe delay is 0 milliseconds.";
builder.selenium1.typeDocs['setTimeout'] = "Specifies the amount of time that Selenium will wait for actions to complete.\n\nActions that require waiting include \"open\" and the \"waitFor*\" actions.\nThe default timeout is 30 seconds.";
builder.selenium1.typeDocs['useXpathLibrary'] = "Allows choice of one of the available libraries.";
builder.selenium1.typeDocs['captureEntirePageScreenshot'] = "Saves the entire contents of the current window canvas to a PNG file.\nContrast this with the captureScreenshot command, which captures the\ncontents of the OS viewport (i.e. whatever is currently being displayed\non the monitor), and is implemented in the RC only. Currently this only\nworks in Firefox when running in chrome mode, and in IE non-HTA using\nthe EXPERIMENTAL \"Snapsie\" utility. The Firefox implementation is mostly\nborrowed from the Screengrab! Firefox extension. Please see\nhttp://www.screengrab.org and http://snapsie.sourceforge.net/ for\ndetails.";
builder.selenium1.typeDocs['captureScreenshot'] = "Captures a PNG screenshot to the specified file.";
builder.selenium1.typeDocs['captureScreenshotToString'] = "Capture a PNG screenshot.  It then returns the file as a base 64 encoded string.";
builder.selenium1.typeDocs['createCookie'] = "Create a new cookie whose path and domain are same with those of current page\nunder test, unless you specified a path for this cookie explicitly.";
builder.selenium1.typeDocs['deleteCookie'] = "Delete a named cookie with specified path and domain.  Be careful; to delete a cookie, you\nneed to delete it using the exact same path and domain that were used to create the cookie.\nIf the path is wrong, or the domain is wrong, the cookie simply won't be deleted.  Also\nnote that specifying a domain that isn't a subset of the current domain will usually fail.\n\nSince there's no way to discover at runtime the original path and domain of a given cookie,\nwe've added an option called 'recurse' to try all sub-domains of the current domain with\nall paths that are a subset of the current path.  Beware; this option can be slow.  In\nbig-O notation, it operates in O(n*m) time, where n is the number of dots in the domain\nname and m is the number of slashes in the path.";
builder.selenium1.typeDocs['deleteAllVisibleCookies'] = "Calls deleteCookie with recurse=true on all cookies visible to the current page.\nAs noted on the documentation for deleteCookie, recurse=true can be much slower\nthan simply deleting the cookies using a known domain/path.";
builder.selenium1.typeDocs['addScript'] = "Loads script content into a new script tag in the Selenium document. This\ndiffers from the runScript command in that runScript adds the script tag\nto the document of the AUT, not the Selenium document. The following\nentities in the script content are replaced by the characters they\nrepresent:\n\n    <\n    >\n    &\n\nThe corresponding remove command is removeScript.";
builder.selenium1.typeDocs['assignId'] = "Temporarily sets the \"id\" attribute of the specified element, so you can locate it in the future\nusing its ID rather than a slow/complicated XPath.  This ID will disappear once the page is\nreloaded.";
builder.selenium1.typeDocs['fireEvent'] = "Explicitly simulate an event, to trigger the corresponding \"onevent\"\nhandler.";
builder.selenium1.typeDocs['highlight'] = "Briefly changes the backgroundColor of the specified element yellow.  Useful for debugging.";
builder.selenium1.typeDocs['rollup'] = "Executes a command rollup, which is a series of commands with a unique\nname, and optionally arguments that control the generation of the set of\ncommands. If any one of the rolled-up commands fails, the rollup is\nconsidered to have failed. Rollups may also contain nested rollups.";
builder.selenium1.typeDocs['runScript'] = "Creates a new \"script\" tag in the body of the current test window, and \nadds the specified text into the body of the command.  Scripts run in\nthis way can often be debugged more easily than scripts executed using\nSelenium's \"getEval\" command.  Beware that JS exceptions thrown in these script\ntags aren't managed by Selenium, so you should probably wrap your script\nin try/catch blocks if there is any chance that the script will throw\nan exception.";

for (var n in builder.selenium1.stepTypes) {
  var stepType = builder.selenium1.stepTypes[n];
  var node = builder.selenium1.typeDocs[stepType.name];
  if (!node) {
    node = builder.selenium1.typeDocs[stepType.baseName];
  }
  builder.selenium1.docs[stepType.name] = {params: {}, description: ""};
  var pNames = stepType.getParamNames();
  for (var i = 0; i < pNames.length; i++) { builder.selenium1.docs[stepType.name].params[pNames[i]] = ""; }
  builder.selenium1.docs[stepType.name].description = node;
}